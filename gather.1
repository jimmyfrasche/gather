.\"    Automatically generated by mango(1)
.TH "gather" 1 "2014-11-22" "version 2014-11-22" "User Commands"
.SH "NAME"
gather \- Command gather(1) gathers all files matching a glob pattern
in the transitive closure of a Go package's dependencies.
.SH "SYNOPSIS"
.B gather
.RB [ \-stdlib ]
.RB [ \-no-deps ]
.RB [ \-exclude
.IR exclude ]
.RB [ \-rel
.IR rel ]
.RB [ \-print0 ]
.RB [ \-. ]
.B $flags
.B import\-path*
.SH "DESCRIPTION"
.BR gather (1)
is like 
.BR find (1)
mashed together with the list subcommand of the 
.BR go (1)
tool. 
It lists the files in Go package directories that match a glob pattern. 
This list can be altered by specifying which packages and what files to show. 
.PP
Packages can be specified by import paths, in the same format as the 
.BR go (1)
tool, including the \&... 
syntax. 
If build tags alter the dependencies of the package, use the 
.B \-tags
flag, which behaves as the 
.B \-tags
flag on the various 
.BR go (1)
subcommands that support it. 
If no packages are specified, the current directory is used. 
.PP
By default, 
.BR gather (1)
also scans the dependencies of these packages, but filters out any standard library dependencies. 
To include standard library dependencies, use the 
.B \-stdlib
flag. 
To not scan the dependencies, use the 
.B \-no-deps
flag. 
.PP
Files are matched by globs as per godoc path/Filepath Match. 
The default glob is *, but to specify import paths you must first specify the pattern. 
By default, dotfiles are excluded. 
To include dotfiles, use the 
.B \-.
flag. 
To exclude matched files that match a second glob, use the 
.B \-exclude
flag. 
.PP
By default, 
.BR gather (1)
prints the absolute path of each matched file. 
To print matched files relative to a given path, use the 
.B \-rel
flag. 
.PP
By default, 
.BR gather (1)
prints each matched file on its own line, with no shell escaping. 
If you have wonky file names use the 
.B \-print0
flag, as with find(1). 
.SH "OPTIONS"
.TP
.BR "\-stdlib "
include standard library packages in search 
.TP
.BR "\-no-deps "
do not search dependencies of specified packages 
.TP
.BR "\-exclude " exclude
glob of files to exclude 
.TP
.BR "\-rel " rel
print all results relative to a given directory 
.TP
.BR "\-print0 "
separate filenames by NUL 
.TP
.BR "\-. "
include dot files 
.SH "EXAMPLES"
List all non\-dot files in the package contained in the current directory, and all of its non\-standard library dependencies, relative to $GOPATH (assumes a single directory in $GOPATH) 
.PP
.RS
gather \-rel=$GOPATH
.sp 0
.sp
.RE
.PP
List all css files, dot or not, in the transitive closure of the dependencies of the package in the current directory, relative to the current directory 
.PP
.RS
gather \-. \-rel=. "*.css"
.sp 0
.sp
.RE
.PP
List the absolute path of all non\-dot \&.go files not matching "doc*.go" in some/package and all of it dependencies, including standard library dependencies. 
.PP
.RS
gather \-exclude "doc*.go" \-stdlib "*.go" some/package
.sp 0
.sp
.RE
.PP
List the absolute path of all dot files like ".git*" in the packages a/b/c, d/e/f, and g/h/... 
ignoring any dependencies 
.PP
.RS
gather \-. \-no\-deps ".git*" a/b/c d/e/f g/h/...
.RE
.SH "SEE ALSO"
.BR find (1),
.BR go (1)
